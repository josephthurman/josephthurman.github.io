<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Joseph Thurman - Data Science</title><link href="http://www.josephthurman.com/" rel="alternate"></link><link href="http://www.josephthurman.com/feeds/data-science.atom.xml" rel="self"></link><id>http://www.josephthurman.com/</id><updated>2018-10-03T14:00:00-04:00</updated><entry><title>Introduction to Analyzing NYT Restaurant Reviews</title><link href="http://www.josephthurman.com/nytreviews1.html" rel="alternate"></link><published>2018-10-03T14:00:00-04:00</published><updated>2018-10-03T14:00:00-04:00</updated><author><name>Joseph Thurman</name></author><id>tag:www.josephthurman.com,2018-10-03:/nytreviews1.html</id><summary type="html">&lt;p&gt;As a person who lives in New York City and is interested in food, I generally enjoy reading the &lt;a href="https://www.nytimes.com/reviews/dining"&gt;restaurant reviews&lt;/a&gt; published by the New York Times. There is a new review of a restaurant in NYC roughly every week that includes a written review of the restaurant and, most â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;As a person who lives in New York City and is interested in food, I generally enjoy reading the &lt;a href="https://www.nytimes.com/reviews/dining"&gt;restaurant reviews&lt;/a&gt; published by the New York Times. There is a new review of a restaurant in NYC roughly every week that includes a written review of the restaurant and, most importantly for our purposes, a summary rating of the restaurant on a scale of 1 to 4 stars.  Unlike other star rating systems, the lowest rating of one star doesn't mean the restaurant is bad. Most restaurants that merit a review in the New York Times are, happily, generally good spots, so even a restaurant with just one star is probably a fine place to eat. Some restaurants do receive no stars. Instead, they are rated as "Fair," "Satisfactory," or similar, but these lower grades are rare and usually reserved for not-very-good restaurants that are noteworthy for some other reason beyond the food. Perhaps the best example of this is the review of a restaurant in Times Square (since closed) by the TV chef Guy Fieri.  When it received a rating of &lt;a href="https://www.nytimes.com/2012/11/14/dining/reviews/restaurant-review-guys-american-kitchen-bar-in-times-square.html"&gt;"Poor"&lt;/a&gt;, the review went viral.&lt;/p&gt;
&lt;p&gt;The star rating system for reviews is the source of some controversy among readers of the column, the main complaint being that the star ratings are &lt;a href="https://dinersjournal.blogs.nytimes.com/2012/03/13/why-our-reviews-have-stars/"&gt;essentially useless&lt;/a&gt;. This is perhaps especially true for the reviews written by the current dining critic, Pete Wells, who is accused of simply giving two stars to nearly every restaurant he reviews.  Wells himself admitted that he found it easier to write two-star reviews in a &lt;a href="https://www.newyorker.com/magazine/2016/09/12/pete-wells-the-new-york-times-restaurant-critic"&gt;profile in the New Yorker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've sometimes felt this way myself, and decided to do a little investigation.  In this project, I'll analyze restaurant reviews written by Wells since 2013 to try to understand if he gives the two-star rating too often.  More specifically, I'll try to build a model that can read a review written by Wells and predict the star rating he will give the restaurant.&lt;/p&gt;
&lt;p&gt;This post will be the first of a short series discussing this project. The full code for this project will available at my &lt;a href="https://github.com/josephthurman/blog-projects/tree/master/nytreviews"&gt;GitHub Page&lt;/a&gt;, which will be updated with each new post in the series.  For this first post, I'll briefly discuss the data collection portion of this project. I'll explain how I used Python to scrape the New York Times website to collect all the raw HTML of all the reviews written by Wells. This post discusses the script &lt;a href="https://github.com/josephthurman/blog-projects/blob/master/nytreviews/review_fetcher.py"&gt;&lt;code&gt;review_fetcher.py&lt;/code&gt;&lt;/a&gt;. The goal of this post is not to explain fully every line of code in that file, but rather to explain some of the data collection choices made in this part of the process. As such only snippets of the code will be discussed in this post, so head over to GitHub to see the full details.&lt;/p&gt;
&lt;h3&gt;Using the NYTimes API&lt;/h3&gt;
&lt;p&gt;The New York Times provides an &lt;a href="https://developer.nytimes.com"&gt;API&lt;/a&gt; that allows one to search the archives of the newspaper.  The full text of articles is not available through this API, but we can retrieve the URL of any individual article. (Other information, including the first paragraph of the article, keywords, etc. are also available through this API, but won't be needed here.) The function &lt;code&gt;get_urls&lt;/code&gt; in &lt;a href="https://github.com/josephthurman/blog-projects/blob/master/nytreviews/review_fetcher.py"&gt;&lt;code&gt;review_fetcher.py&lt;/code&gt;&lt;/a&gt; does the work of querying the API, ultimately returning a list of URLs of restaurant reviews that we access in the next section.  &lt;/p&gt;
&lt;p&gt;The &lt;a href="https://developer.nytimes.com/article_search_v2.json#/README"&gt;documentation&lt;/a&gt; for the API explains how to construct queries as a URL that, upon access, returns the queried data in JSON format. Using this documentation, we can construct the following query to find the articles that we're interested in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;query_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://api.nytimes.com/svc/search/v2/articlesearch.json&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
                &lt;span class="s1"&gt;&amp;#39;?api_key=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NYT_API_KEY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;begin_date=20130101&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;end_date = 20181003&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;fl=web_url&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
                &lt;span class="s1"&gt;&amp;#39;&amp;amp;fq=byline:(&amp;quot;Pete Wells&amp;quot;)ANDtype_of_material:(&amp;quot;Review&amp;quot;)ANDnews_desk:(&amp;quot;Dining&amp;quot;,&amp;quot;Food&amp;quot;)&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this particular project, we're searching for reviews written by Pete Wells after January 1, 2013 that fall under the Dining and Food sections of the paper.  Specifying &lt;code&gt;fl=web_url&lt;/code&gt; limits the data returned to the URL for each article.  If you use this code yourself, you'll need to register for your own API key and use that value in place of &lt;code&gt;NYT_API_KEY&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using this URL and the &lt;a href="http://docs.python-requests.org/en/master/"&gt;requests&lt;/a&gt; package, we can easily query the API to obtain a list of URLs called &lt;code&gt;returned_url_list&lt;/code&gt;. Unfortunately, there are some errors and miscategorizations in the articles returned by the API, in that it returns some URLs for articles that are not restaurant reviews. Luckily, many of these can be weeded out simply by inspecting the URLs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bad_words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(blog)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(interactive)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(wine-school)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(insider)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(hungry-city)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(best)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s2"&gt;&amp;quot;(/books/)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(slideshow)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(obituaries)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(recipes)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(reader-center)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(technology)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;final_url_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;returned_url_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;|&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bad_words&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;final_url_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This uses a simple search to filter out some of articles that aren't true restaurant reviews, and saves what's left to &lt;code&gt;final_url_list&lt;/code&gt;. The exceptions above were originally found in the next part of the project, which parses the HTML for each article to extract the review text and other features, as URLs associated to pages that couldn't be parsed.  Many of the exceptions above are self-explanatory, or are understandable to readers of the New York Times. For example, cookbook reviews written by Wells are excluded by removing URLs containing "books", while articles from the "Hungry City" column are restaurant reviews of (generally cheaper) restaurants that aren't rated using the star system, and therefore aren't relevant to our analysis.&lt;/p&gt;
&lt;p&gt;Unfortunately this still leaves some articles in the &lt;code&gt;final_url_list&lt;/code&gt; that aren't true restaurant reviews with star ratings. These articles can only be found, however, by inspecting the HTML of the page itself. We consider this problem in the next step, as we download the the raw HTML for each review for later processing.&lt;/p&gt;
&lt;h3&gt;Downloading the Reviews&lt;/h3&gt;
&lt;p&gt;The next step in the process is to actually download the HTML for each article in the &lt;code&gt;final_url_list&lt;/code&gt;, saving that data for future processing.  This work is done by the &lt;code&gt;get_reviews&lt;/code&gt; function defined in &lt;code&gt;review_fetcher.py&lt;/code&gt;. This function is relatively straightforward - it simply downloads the HTML for each URL in &lt;code&gt;final_url_list&lt;/code&gt; and saves it to disk.  However, there are two special aspects of this function that are worth discussing.&lt;/p&gt;
&lt;p&gt;The first concerns the additional filtering mentioned above - there are still some non-restaurant review articles that need to be removed from the list, but that cannot be excluded based on their URL.  To deal with these cases, we define the following function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_misclassified&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;meta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Critic.*Notebook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)}))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;p.*?&amp;gt;\s*[Cc]ritic.*[Nn]otebook\s*&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;meta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hungry-city&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function takes in the HTML from a website, parsed as a &lt;code&gt;BeautifulSoup&lt;/code&gt; object using the &lt;a href="https://www.crummy.com/software/BeautifulSoup/"&gt;BeautifulSoup&lt;/a&gt; library for web scraping.  It then searches the page for two indications that the article is not a restaurant review with a star rating, by trying to determine if it is a "Critic's Notebook" column or a "Hungry City" column. This is most easily done by using the &lt;code&gt;BeautifulSoup&lt;/code&gt; library to search for HTML metadata tags that describe the type of content.  &lt;/p&gt;
&lt;p&gt;Unfortunately, the New York Times has not always consistently labeled all content with accurate metadata, and so this search does not always find all the articles that need to be excluded. In this case, we instead have to search the raw HTML directly to see if the page contains the words "Critic's Notebook". This somewhat hacky solution of having to parse pages using multiple methods in order to deal with inconsistencies in the formatting and data tagging will unfortunately be very common in the next part of the project, when we extract the review data from the raw HTML for further analysis.&lt;/p&gt;
&lt;p&gt;The other special aspect of this function is some simple error handling to deal with problems that may arise while attempting to download the different pages.  The main issue I encountered came from making too many requests to the New York Times for articles in a short time span.  When this occurred, making a request for a page returned a standard error page from the New York Times website, instead of the article itself. Since this request still returns the HTML for some web page, just not containing the content we want, we need a simple function to check that the content returned from any request is actually an article and not an error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_server_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;meta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;500 - Server Error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Luckily, this is easily accomplished by looking for HTML metadata tags indicating an error. Any URL that returns such an error page is put back on a list of URLs to try again later.  After a first pass through the URL list, any that have not been successfully accessed are tried again.  Any URLs that can't be successfully accessed after multiple tries are printed to the terminal to be accessed by hand, although in my experience all URLs could be successfully accessed in less than 3 passes.&lt;/p&gt;
&lt;h3&gt;Next Time: Processing the Reviews&lt;/h3&gt;
&lt;p&gt;If you'd like to follow along with the next parts of this project, you can download this script from &lt;a href="https://github.com/josephthurman/blog-projects/tree/master/nytreviews"&gt;GitHub&lt;/a&gt; and run it yourself. This should create a directory called &lt;code&gt;reviews&lt;/code&gt; in the same folder from which you ran the script, which will include the HTML files associated to 278 reviews. There are some caveats to this, however:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You will need to sign up for an &lt;a href="https://developer.nytimes.com"&gt;API key&lt;/a&gt; with the New York Times. This API key is stored in a separate &lt;code&gt;config.py&lt;/code&gt; file which is not included in the repository for security reasons.&lt;/li&gt;
&lt;li&gt;Since this script only needs to run successfully once, I haven't put in very much time to make it more robust. It handles the errors the I encountered while using it, but you might have other issues that I didn't anticipate.  If you have ideas to improve this script to handle other possible issues, you could make a &lt;a href="https://github.com/josephthurman/blog-projects"&gt;pull request on GitHub&lt;/a&gt; or contact me using &lt;a href="http://www.josephthurman.com/contact/"&gt;this form&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Relatedly, this script worked for me on the day this was posted, but the API or the articles themselves may change after that. When you try to fetch the data yourself, it might all be different.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After running the &lt;code&gt;review_fetcher&lt;/code&gt; script, we have the raw data for our project, the HTML for all restaurant reviews (and a few other things) written by Wells over the last 5 years.  In the next part of the project, we'll see how to parse these files to extract the relevant information (review text, number of stars, restaurant price, etc.) from these reviews into a tidy data set for use in the actual analysis.&lt;/p&gt;</content><category term="data science"></category><category term="python"></category><category term="NY Times"></category></entry></feed>