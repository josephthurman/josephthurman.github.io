<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Joseph Thurman - Finance</title><link href="http://www.josephthurman.com/" rel="alternate"></link><link href="http://www.josephthurman.com/feeds/finance.atom.xml" rel="self"></link><id>http://www.josephthurman.com/</id><updated>2018-03-29T12:00:00-04:00</updated><entry><title>Expanding the Binomial Option Pricing Model</title><link href="http://www.josephthurman.com/binomial4.html" rel="alternate"></link><published>2018-03-29T12:00:00-04:00</published><updated>2018-03-29T12:00:00-04:00</updated><author><name>Joseph Thurman</name></author><id>tag:www.josephthurman.com,2018-03-29:/binomial4.html</id><summary type="html">&lt;p&gt;This post will be the last post, at least for the time being, in the series discussing the &lt;a href="http://www.josephthurman.com/tag/binomial-model.html"&gt;binomial model&lt;/a&gt; for pricing options. In the &lt;a href="http://www.josephthurman.com/binomial3.html"&gt;previous post&lt;/a&gt; we implemented this model in Python in order to find prices for basic European call options.  In this post, we'll expand the implementation â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post will be the last post, at least for the time being, in the series discussing the &lt;a href="http://www.josephthurman.com/tag/binomial-model.html"&gt;binomial model&lt;/a&gt; for pricing options. In the &lt;a href="http://www.josephthurman.com/binomial3.html"&gt;previous post&lt;/a&gt; we implemented this model in Python in order to find prices for basic European call options.  In this post, we'll expand the implementation so that it can be used to price a wider variety of options, including American options.&lt;/p&gt;
&lt;h3&gt;Pricing European Put Options&lt;/h3&gt;
&lt;p&gt;To begin, let's take a second look at the implementation we found in the previous post to price call options.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;binomial_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
    &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vol&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How would we need to change this function to price a put option instead? Recall that a call option gives the right to buy the underlying stock for a particular price, while a put option gives the right to sell for a particular price. The only real difference between the two is the payoff function. If either type of option has a strike price of &lt;span class="math"&gt;\(K\)&lt;/span&gt;, and if we use &lt;span class="math"&gt;\(S_T\)&lt;/span&gt; to denote the spot price of the stock at expiration, then the call option is worth
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation*}
C = \max(S_T-K,0)
\end{equation*}&lt;/div&gt;
&lt;p&gt;
at expiration, since the option allows one to purchase the stock for &lt;span class="math"&gt;\(K\)&lt;/span&gt; and immediately resell in the market for &lt;span class="math"&gt;\(S_T\)&lt;/span&gt; for a profit of &lt;span class="math"&gt;\(S_T-K\)&lt;/span&gt;, and one would only exercise this option if &lt;span class="math"&gt;\(S_T-K &amp;gt; 0\)&lt;/span&gt;.  Similarly, the payoff of a put option is
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation*}
P = \max(K-S_T,0)
\end{equation*}&lt;/div&gt;
&lt;p&gt;
since, if one held the option, they could purchase the stock for &lt;span class="math"&gt;\(S_T\)&lt;/span&gt; in the market and resell for &lt;span class="math"&gt;\(K\)&lt;/span&gt; using the option for a profit of &lt;span class="math"&gt;\(K-S_T\)&lt;/span&gt;, and again this option is only exercised if &lt;span class="math"&gt;\(K-S_T &amp;gt; 0\)&lt;/span&gt;.  To modify the code above to price a put option, we only need to change the part where we compute the value of the option at expiry to use this other payoff function. The resulting function is below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;binomial_put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
    &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vol&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#New payoff function for put options&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above code works perfectly well, but what if we had a third type of options trade with a third payoff? For example, we could consider an options trading strategy called a &lt;a href="https://en.wikipedia.org/wiki/Straddle"&gt;straddle&lt;/a&gt;.  Such a trade consists of buying both a call option and a put option on a stock, with the strike price for both equal to the price of the stock today.  What is such a trade good for? If a trader owns a straddle and the price of the stock goes up, then they can exercise the call option and receive the change in price.  On the other had, if the price goes down, they can exercise the put option instead.  This isn't actually a free money machine like it sounds - the trader has to pay some amount to purchase the straddle, and so they'll only make a profit if the change in the price of the stock is greater than the price they paid for the straddle.  Therefore a trader who buys a straddle is betting that the stock will make a large change in its value over the life of the option, but can't decide whether that change will be an increase or decrease.&lt;/p&gt;
&lt;p&gt;How could one find the price of a straddle?  Well, a straddle consists of a call and a put, so one method to price a straddle would be to use the above functions to find the price of the call and put separately and simply add them together. A second option, though, is to consider the payoff function of the straddle.  It's not hard to see that the payoff is simply
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation*}
\text{Straddle} = |S_T - K|
\end{equation*}&lt;/div&gt;
&lt;p&gt;
where &lt;span class="math"&gt;\(K\)&lt;/span&gt; is the strike price on the two options, assumed to be the value of the stock today.  We could therefore write a third function to price straddles, modifying the function in the final payoff step to be the payoff function for straddles. This method will give the same price as the one we'd get by pricing the put and call options in the straddle separately, but will run roughly twice as fast since it will require constructing only one binomial pricing tree instead of two.&lt;/p&gt;
&lt;p&gt;Of course, a straddle is but one example of any number of possible options strategies that can consist of long and short positions in multiple options with varying types and strike prices. Many of these have fun names like a &lt;a href="https://en.wikipedia.org/wiki/Strangle_%28options%29"&gt;strangle&lt;/a&gt;, an &lt;a href="https://en.wikipedia.org/wiki/Iron_condor"&gt;iron condor&lt;/a&gt;, or, most bizarrely, the &lt;a href="https://en.wikipedia.org/wiki/Jade_Lizard"&gt;jade lizard&lt;/a&gt;. Since all of these strategies are combinations of simpler call and put options, we could price them by finding the price of all of the components and taking the sum. This is more computationally expensive than it needs to be, though, especially for complicated strategies that could involve many options. The easier pricing method is to observe that each of these strategies also has a single function that determines the payoff of the option from the spot price of the asset at expiration. (It's the sum of the payoff functions of all of the options involved in the strategy.) Instead of writing tens or even hundreds of different functions for all the various different type of options trades, we'll instead modify the function we've defined above so that we can easily change the payoff associated to the option.&lt;/p&gt;
&lt;p&gt;The resulting function is defined below.  We also give some functions to produce the payoff function of a call, put, and straddle.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;binomial_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;payoff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    payoff is a function that describes the payoff of the option,&lt;/span&gt;
&lt;span class="sd"&gt;        at expiry, as a function of the value of the underlying&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
    &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vol&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payoff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call_payoff_with_strike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;put_payoff_with_strike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;straddle_payoff_with_strike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As a simple check, note that our new method to price a call gives the same answer as our old function for pricing the same option. (The various parameters below were chosen arbitrarilty.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binomial_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binomial_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;call_payoff_with_strike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.42805363986800904
0.42805363986800904
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our new functions are also consistent, in that the price of a straddle is the sum of the call and put prices.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binomial_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;call_payoff_with_strike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binomial_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;put_payoff_with_strike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;straddle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binomial_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;straddle_payoff_with_strike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;straddle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;7.962206120543319
7.9622061205433186
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above code suggests that it may be clarifying to rewrite our code using an object-oriented approach - instead of taking the payoff function itself as an argument in our function, we could define an &lt;code&gt;Option&lt;/code&gt; class that would include a method to compute the payoff of the option.  Before we begin making those larger changes, though, we'll also consider what changes we need to make to our implementation to be able to price American options.  &lt;/p&gt;
&lt;h3&gt;Pricing American Options&lt;/h3&gt;
&lt;p&gt;Recall that while European options can only be exercised on one particular day, American options can be exercised at any time before they expire. Since American options give their holders more rights than European options, American options should be worth at least as much as their European counterparts. But how much more: how much is the ability to exercise the option early worth?&lt;/p&gt;
&lt;p&gt;This is related to what is called the &lt;em&gt;intrinsic value&lt;/em&gt; of an option, which is defined to be the value the option would have if it were exercised now, regardless of whether or not we're actually able to exercise the option at this time. For example, if you own a European call option on a stock with strike price &amp;dollar;100 that expires in 3 months, and the stock price right now is &amp;dollar;105, then the intrinsic value of the option today is &amp;dollar;5, even though the option can't actually be exercised right now.  &lt;/p&gt;
&lt;p&gt;It is important to note that the intrinsic value of the option is &lt;em&gt;not&lt;/em&gt; the same as the price of the option today - for example, in the situation we just described, if we us the same values for the risk-free rate and volatility that we've assumed in our examples above then the price of the option given by the model (using &lt;span class="math"&gt;\(N = 500\)&lt;/span&gt; steps) is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;binomial_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;call_payoff_with_strike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;7.318672372367908
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that this value is actually higher than the intrinsic value of &amp;dollar;5 - we'll discuss this point more later.  &lt;/p&gt;
&lt;p&gt;For a European call option, the idea of intrinsic value doesn't make a big difference in the actual pricing, since these options can only be exercised at a specific time.  An American option, though, can always be exercised to gain the intrinsic value. To find the value of an American option at any particular time, we need to consider both the expected future value of the option (as we have done for European options) and the intrinsic value. The actual value of the option at that time is then the &lt;em&gt;larger&lt;/em&gt; of these two values.&lt;/p&gt;
&lt;p&gt;We can easily modify our earlier code to accommodate this change.  In the main loop where we work backward through the tree, we have already calculated the theoretical future value of the option.  We can simply add an extra line of code to compute the intrinsic value of the option, and then take the maximum to find the value of the option at each node. Of course, we only want to make this change for pricing American options, and so this aspect of the calculation needs to be something controlled by the &lt;code&gt;Option&lt;/code&gt; class in the object-oriented approach we're about to implement.&lt;/p&gt;
&lt;h3&gt;An Object-Oriented Implementation&lt;/h3&gt;
&lt;p&gt;Our model has three components that are fairly distinct, namely a stock, an option on that stock, and a binomial model to find the price of that option. Each of these concepts will have its own corresponding class. The simplest class is the one that will describe a stock.  In our model, the stock really has only two values associated to it - today's spot price and the stock's volatility - and so the definition of this class is very simple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Stock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vol&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spot&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vol&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With such little information, we don't actually need the overhead of defining this stock class, but it's worth it to separate the stock from the concept of an option since options can be written on many underlying assets.&lt;/p&gt;
&lt;p&gt;As far as the option is concerned, we have a few pieces of information that define the option itself - the underlying asset, the expiration date of the option, and the payouts associated to the option.  To consider the distinction between American and European options, we describe the payout of the option using two different functions, one that gives the final value at expiration and another function for the payout associated to early exercise. A base class from which our other option types will inherit is defined below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;underlying&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expiry&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;underlying&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;underlying&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expiry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expiry&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;final_payoff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Final option payoff is not defined&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;early_payoff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Early exercise payoff is not defined&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can then implement subclasses that give the specific behavior of American and European call and put options.  These options have an extra parameter associated to them, the strike price of the option.  For European call options, the &lt;code&gt;final_payoff&lt;/code&gt; function is the same as what we've used before, and the &lt;code&gt;early_payoff&lt;/code&gt; function just returns 0 since the option cannot be exercised early.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EuroCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;underlying&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expiry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strike&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;underlying&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expiry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strike&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strike&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;final_payoff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spot&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strike&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;early_payoff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EuroPut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;underlying&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expiry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strike&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;underlying&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expiry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strike&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strike&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;final_payoff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strike&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;spot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;early_payoff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can also define classes to represent American options.  These are just like European options, except the &lt;code&gt;early_payoff&lt;/code&gt; function is the same as the &lt;code&gt;final_payoff&lt;/code&gt; function.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AmerCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EuroCall&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;early_payoff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;final_payoff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AmerPut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EuroPut&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;early_payoff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;final_payoff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This framework is flexible enough to allow for many other types of options beyond combinations of calls and puts. For example, instead of American options, where the &lt;code&gt;final_payoff&lt;/code&gt; and &lt;code&gt;early_payoff&lt;/code&gt; functions are the same, we could consider options that have an entirely different payoff if exercised early, perhaps with a some kind of early-exercise penalty. We could also easily add a time parameter to the &lt;code&gt;early_payoff&lt;/code&gt; function, and consider more complicated options that could, for example, only be exercised on certain days, or have different strike prices over the life of the option.&lt;/p&gt;
&lt;p&gt;Finally, we define a class that contains the actual binomial pricing method.  This class takes in the option and the risk-free rate as an input, and then includes a method that runs the binomial model for a given number of steps to find its price. Since our model will now need to take into account the possible intermediate values of the stock price in order to price American options, we define an extra function to make that computation. Otherwise, the code is very similar to what we have had before, except some of the parameters are now considered as attributes of various objects instead of as function arguments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BinomialModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expiry&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
        &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;underlying&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vol&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Computes the price of the underlying asset k steps into the tree with m up movements&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;underlying&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spot&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;final_payoff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;future_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
                &lt;span class="n"&gt;exercise_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;early_payoff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exercise_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just to make sure we haven't introduced any errors, we can check to make sure that our new code finds the same prices as before.  Consider the example we computed before:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;binomial_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.42805363986800904
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using our new code, which now requires a few more lines to write, we have&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;test_stock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Stock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;euro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EuroCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_stock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;BinomialModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;euro&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.015&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.42805363986800904
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thankfully, it appears we haven't broken anything in refactoring our code to make it object-oriented.&lt;/p&gt;
&lt;h3&gt;American vs. European Options&lt;/h3&gt;
&lt;p&gt;American options, as we've discussed above, are essentially European options along with the extra right to exercise early. It seems this extra right should be worth something, and that an American option should be worth more than its European counterpart. Is that actually the case?&lt;/p&gt;
&lt;p&gt;In particular, with can price an American call option with the same parameters as the European option we priced at the end of the last section:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;amer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AmerCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_stock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;BinomialModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.015&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0.42805363986800904
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This price is the same as the price for the European option, and we just argued that the American option should be worth more.  Did we make a mistake in our model?&lt;/p&gt;
&lt;p&gt;It turns out that the early exercise rights of an American option do not necessarily have any value. Looking at our code, we see that the American option will only be worth more than the European option if there are times when the "exercise value" (which is also the intrinsic value of the option) is worth more than the expected future value of the option.  For American call options, this will never actually occur if the risk-free interest rate is positive. (This is actually only true for stocks that don't pay dividends, which are the only stocks we've been considering so far. If the stock pays a dividend during the life of the option, then it may be worth it to exercise the call option early so that one can hold the stock and receive the dividend payment.)&lt;/p&gt;
&lt;p&gt;To see this, consider a portfolio that consists of one share of the asset underlying the call option along with a obligation to pay &lt;span class="math"&gt;\(K\)&lt;/span&gt; dollars on the expiration date of the option (i.e., in order to repay a risk-free loan). Let &lt;span class="math"&gt;\(S_t\)&lt;/span&gt; denote the value of the stock at a given time, and &lt;span class="math"&gt;\(Z_t\)&lt;/span&gt; denote the value of the loan. If interest rates are positive, we have that &lt;span class="math"&gt;\(Z_t &amp;lt; Z_T\)&lt;/span&gt; for all &lt;span class="math"&gt;\(t &amp;lt; T\)&lt;/span&gt;. Let &lt;span class="math"&gt;\(C_t\)&lt;/span&gt; denote the value of the option at time &lt;span class="math"&gt;\(t\)&lt;/span&gt;, and let &lt;span class="math"&gt;\(T\)&lt;/span&gt; denote the expiration time of the option.  &lt;/p&gt;
&lt;p&gt;At expiration, we have that &lt;span class="math"&gt;\(Z_T = K\)&lt;/span&gt; and so the value of the portfolio is &lt;span class="math"&gt;\(S_T-Z_T = S_T - K \leq \max(S_T-K,0) = C_T\)&lt;/span&gt;. Therefore by no-arbitrage principles we have that &lt;span class="math"&gt;\(S_t - Z_t \leq C_t\)&lt;/span&gt; for all earlier times. Since interest rates are positive, we have &lt;span class="math"&gt;\(S_t-Z_t &amp;gt; S_t-K\)&lt;/span&gt;, and so combining these inequalities gives that
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation*}
S_t - K &amp;lt; S_t - Z_t \leq C_t
\end{equation*}&lt;/div&gt;
&lt;p&gt;
that is, the value of a call option at a particular time is always greater than the intrinsic value of the option. In particular, an investor is never better off by exercising an American call option early, and so the extra rights of an American call option are worthless.  If an investor holds the option and wanted to cash out, it would always be better for them to sell the option than to exercise it. Note that our argument was based on no-arbitrage principles, and therefore doesn't rely on any of the special assumptions about price movement of the underlying asset in our particular binomial model.&lt;/p&gt;
&lt;p&gt;American put options really are different from European puts, though. There are times when it is better to exercise an American put option early, and so American put options can be worth strictly more than their European counterparts.  For example, sticking with the same stock and option parameters we've been considering, but pricing put options instead, gives&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;amerp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AmerPut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_stock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BinomialModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amerp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.015&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;europ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EuroPut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_stock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BinomialModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;europ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.015&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;15.183131872004736
14.997611223826567
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the American option is in fact worth more. One possible way we could improve our code would be to add a method to the &lt;code&gt;BinomialModel&lt;/code&gt; class that could find the nodes in the tree that correspond to situations in which early exercise of the option is preferred.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;And that's it! It's taken a fair amount of work, but we've managed to build a fairly efficient model for pricing a number of different types of options on simple stocks. Even better, we did this without any hardcore mathematics - our model uses nothing more complicated than basic probability, and all of the hard work is done by a computer in simulation.&lt;/p&gt;
&lt;p&gt;Of course, there are still plenty of ways that our model could be improved. For example, we've taken the volatility of the underlying stock as a given, but where does this number actually come from?  We've also ignored dividends that might be paid on the stock, transaction costs, and tax considerations. But the underlying theory of the model, and our specific implementation of it in Python, is flexible enough that we could continue to make modifications to address these concerns. If you'd like to do that, you can check out a consolidated and lightly-commented version of the final implementation on my &lt;a href="https://github.com/josephthurman/blog-projects"&gt;Github page&lt;/a&gt;.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="finance"></category><category term="binomial-model"></category><category term="python"></category></entry><entry><title>Implementing the Binomial Option Pricing Model</title><link href="http://www.josephthurman.com/binomial3.html" rel="alternate"></link><published>2018-03-15T14:00:00-04:00</published><updated>2018-03-15T14:00:00-04:00</updated><author><name>Joseph Thurman</name></author><id>tag:www.josephthurman.com,2018-03-15:/binomial3.html</id><summary type="html">&lt;p&gt;In the &lt;a href="http://www.josephthurman.com/binomial1.html"&gt;previous&lt;/a&gt; &lt;a href="http://www.josephthurman.com/binomial2.html"&gt;posts&lt;/a&gt; in this series, we've described a model for stock price movements that can be used to find prices of simple European call and put options.  The model works by dividing the life of the option into some number of discrete intervals, and assuming that the stock â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the &lt;a href="http://www.josephthurman.com/binomial1.html"&gt;previous&lt;/a&gt; &lt;a href="http://www.josephthurman.com/binomial2.html"&gt;posts&lt;/a&gt; in this series, we've described a model for stock price movements that can be used to find prices of simple European call and put options.  The model works by dividing the life of the option into some number of discrete intervals, and assuming that the stock price randomly moves either up or down by a fixed percentage over each short interval.  This gives a tree of possible prices for the stock, and the option's value at each node in this tree can be computed as a discounted expected value of the future value of the option at later nodes in the tree, where the expected value is computed using risk-neutral probability and the discount factor is determined by the risk-free interest rate.  &lt;/p&gt;
&lt;p&gt;In those previous posts, we computed prices given by this model in very simple cases, with only one or two steps. For the model to be effective, a larger number of steps will be required, and so it will no longer be feasible to compute by hand as we've done before.  In this post, we'll see how to implement the model in Python, consider a better way for choosing the parameters &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(d\)&lt;/span&gt; in the model, and then discuss the rate of convergence of the algorithm&lt;/p&gt;
&lt;h3&gt;The First Implementation&lt;/h3&gt;
&lt;p&gt;We begin by giving a first, direct implementation of the model to compute the price of a call option.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;first_binomial_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The notation in this implementation is essentially identical to the notation we used to describe the model in the previous post. We use all of the same symbols to denote the parameters in the model, except we write &lt;code&gt;dt&lt;/code&gt; instead of &lt;span class="math"&gt;\(\Delta t\)&lt;/span&gt; for the length of the time interval of each step.  We use a dictionary to store the values of the option at each node, and use the same notation for the keys of the dictionary, that is, &lt;code&gt;C[(k,m)]&lt;/code&gt; above is the same as the value &lt;span class="math"&gt;\(C(k,m)\)&lt;/span&gt; in the previous post, meaning the value of the option at the node that is &lt;span class="math"&gt;\(k\)&lt;/span&gt; steps into the tree, with &lt;span class="math"&gt;\(m\)&lt;/span&gt; of those steps being up movements in the stock.  &lt;/p&gt;
&lt;p&gt;The implementation above proceeds by computing the value of the time step &lt;code&gt;dt&lt;/code&gt; and finding the risk-neutral probability &lt;code&gt;p&lt;/code&gt;. The first loop then finds the value of the option at the end of the tree, using the normal payoff of a call option (the stock price minus the strike price if that is positive, and otherwise 0).  The next pair of nested loops then works backward through the tree to iteratively fill in the value of the option at every node. The value at the root node is returned as the price of the option today.&lt;/p&gt;
&lt;p&gt;We can do a very simple check of our implementation to make sure that it can reproduce the computation that we've already done by hand.  In the first post in this series, we priced a call option on a stock that is worth &amp;dollar;100 today and is assumed to be worth either &amp;dollar;120 or &amp;dollar;80 in three months time.  We ignored interest rates in that model and only used one step.  If the strike price on the option is &amp;dollar;100, then our implementation of the model gives that the price is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;first_binomial_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;10.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the same price we computed before by hand.  At least our implementation appears correct in this simple case!&lt;/p&gt;
&lt;p&gt;Now that we have a computer to do the work for us, we can run the model with many more steps, that is, we can increase the value of &lt;span class="math"&gt;\(N\)&lt;/span&gt; to find a better price for the option.  There is one subtlety with our implementation, though, that makes this difficult. To understand the problem, we can see what happens as we increase the number of steps.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;With N = {:3d}, the price is {:.2f}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;first_binomial_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;With N =   1, the price is 10.00
With N =  10, the price is 25.62
With N = 100, the price is 68.55
With N = 200, the price is 84.56
With N = 300, the price is 91.90
With N = 400, the price is 95.61
With N = 500, the price is 97.58
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As the number of steps increases, the price is going up, and quite drastically, to approach the current value of the stock.  This doesn't make sense - the price of the option should not be the same as the price of the stock. What's going on here?&lt;/p&gt;
&lt;p&gt;The problem concerns our choice of &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(d\)&lt;/span&gt; - these values represent the change in price of the stock option over each small time interval. As such, the value of &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(d\)&lt;/span&gt; depend implicitly on the length of that time interval.  Therefore if we increase the number steps in the model, thus decreasing the length of each interval, but leave &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(d\)&lt;/span&gt; constant, we're actually changing the total amount we're allowing the stock price to move.  In our specific example, with one step we have that the final value of the stock is either &lt;span class="math"&gt;\(Su = 100 (1.2) = 120\)&lt;/span&gt; or &lt;span class="math"&gt;\(Sd = 100(0.8) = 80\)&lt;/span&gt;, that is, the stock price can move by 20% every three months. If we increase &lt;span class="math"&gt;\(N\)&lt;/span&gt; to 3 without changing &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(d\)&lt;/span&gt;, then we have that stock price can change by 20% every month, and the final values of the stock can range between &lt;span class="math"&gt;\(Su^3 = 100(1.2)^3 = 172.80\)&lt;/span&gt; and &lt;span class="math"&gt;\(Sd^3 = 100(0.8)^3 = 51.20\)&lt;/span&gt;, which is a very different range.  Therefore, as we change &lt;span class="math"&gt;\(N\)&lt;/span&gt;, we need to modify &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(d\)&lt;/span&gt; as well to keep our predictions about the future movement of the stock price consistent. This leads us to consider how best to determine the value of &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(d\)&lt;/span&gt; in our model.&lt;/p&gt;
&lt;h3&gt;Choosing &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(d\)&lt;/span&gt;: Volatility&lt;/h3&gt;
&lt;p&gt;Our values of &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(d\)&lt;/span&gt; represent the possible return on the stock over a short period of time.  As such, a large value of &lt;span class="math"&gt;\(u\)&lt;/span&gt; (or a small value of &lt;span class="math"&gt;\(d\)&lt;/span&gt;) means that the price of the stock could change drastically over a short period of time.  A stock price that changes drastically over a period of time is called &lt;em&gt;volatile&lt;/em&gt;, and so &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(d\)&lt;/span&gt; in some sense describe the &lt;em&gt;volatility&lt;/em&gt; of the stock. It's really the volatility that we'd like to have as the parameter in the model. That is, instead of choosing &lt;span class="math"&gt;\(u, d\)&lt;/span&gt; as independent parameters in our model, as we've done so far, we're going to compute &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(d\)&lt;/span&gt; from the values of &lt;span class="math"&gt;\(T\)&lt;/span&gt; and &lt;span class="math"&gt;\(N\)&lt;/span&gt; along with a third number that measures volatility. This will solve the problem we have above by making explicit the dependence of &lt;span class="math"&gt;\(u, d\)&lt;/span&gt; on the variable &lt;span class="math"&gt;\(dt\)&lt;/span&gt;.  &lt;/p&gt;
&lt;p&gt;Volatility, in this setting, is really just another word for risk.  If a stock price was not volatile, that would mean it didn't move, or moved absolutely predictably, and would not be risky.  A more volatile stock, that is, one that can change wildly in price, is clearly more risky than an asset with a price that can only change by a small amount.&lt;/p&gt;
&lt;p&gt;There's already a mathematical way to describe volatility or riskiness, called &lt;em&gt;standard deviation&lt;/em&gt;.  If &lt;span class="math"&gt;\(X\)&lt;/span&gt; is a random variable, with expected value &lt;span class="math"&gt;\(E(X)\)&lt;/span&gt;, also called the mean and denoted by &lt;span class="math"&gt;\(\mu\)&lt;/span&gt;, then the &lt;em&gt;variance&lt;/em&gt;, denoted by &lt;span class="math"&gt;\(\sigma^2\)&lt;/span&gt;, is defined to be &lt;span class="math"&gt;\(\sigma^2 = E((X-\mu)^2)\)&lt;/span&gt;, that is, the variance is the expected value of the square of the difference between an observed value of the random variable and the mean. The standard deviation, &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt;, is the square root of the variance - knowing one determines the other.  If a random variable has a large standard deviation, that means that a wider range of values around the mean are likely, while a small standard deviation means that the variable is more likely to be observed to be close to its mean. Put another way, if we tried to guess the value of the random variable by guessing the mean, then the standard deviation gives a way to measure the likely error of such a guess.&lt;/p&gt;
&lt;p&gt;In our model, we will assume that the return on the price of the stock underlying the option is a random variable with a fixed variance of &lt;span class="math"&gt;\(\sigma^2\)&lt;/span&gt;.  This variance will be independent of time in the sense that, if &lt;span class="math"&gt;\(S\)&lt;/span&gt; is the price of the stock today and &lt;span class="math"&gt;\(S^\prime\)&lt;/span&gt; denotes the stock price after &lt;span class="math"&gt;\(\Delta t\)&lt;/span&gt; units of time, considered as a random variable, then we will assume that the variance of the random variable &lt;span class="math"&gt;\(\frac{S^\prime - S}{S}\)&lt;/span&gt;, the return on the stock, will be &lt;span class="math"&gt;\(\sigma^2 \Delta t\)&lt;/span&gt;.  For example, if we measure time in years, then choosing &lt;span class="math"&gt;\(\sigma = 0.2\)&lt;/span&gt; would say that the standard deviation in the returns on the stock is assumed to be 20% over the year, or &lt;span class="math"&gt;\(0.2(\sqrt{0.5}) = 14.1\%\)&lt;/span&gt; over 6 months, etc. (For the reader familiar with statistics, we're ultimately assuming that the returns on the stock price over a time period of &lt;span class="math"&gt;\(\Delta t\)&lt;/span&gt; are normally distributed with variance &lt;span class="math"&gt;\(\sigma^2 \Delta t\)&lt;/span&gt;. The mean of the normal this distribution is chosen so that the expected value of the stock at any particular time grows according to the risk-free rate - this is essentially done using our formula for &lt;span class="math"&gt;\(p\)&lt;/span&gt;, the risk-neutral probability, and so we won't worry about it here.)&lt;/p&gt;
&lt;p&gt;Based on this value of &lt;span class="math"&gt;\(\sigma^2\)&lt;/span&gt;, we'll choose &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(d\)&lt;/span&gt; as follows:
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
    u &amp;amp;= e^{\sigma \sqrt{\Delta T}} \\
    d &amp;amp;= \frac{1}{u}
\end{align*}&lt;/div&gt;
&lt;p&gt;A full explanation of why we make these choices will have to wait for a later post.  The short answer is that these choices mean that our model will be a good approximation for a popular model of stock prices called &lt;em&gt;geometric Brownian motion&lt;/em&gt;. For now, we'll just make use of this choice and make note of a two properties of our choices.  First, the larger &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt; is, the larger &lt;span class="math"&gt;\(u\)&lt;/span&gt; is, hence the smaller &lt;span class="math"&gt;\(d\)&lt;/span&gt; is, and therefore the greater the spread of values in our model, matching with the intuition we developed earlier.  Second, the fact that &lt;span class="math"&gt;\(ud = 1\)&lt;/span&gt; will allow us to simplify some computations.&lt;/p&gt;
&lt;h3&gt;The Final Model&lt;/h3&gt;
&lt;p&gt;With this method for choosing &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(d\)&lt;/span&gt; in our model, we can make an easy modification to the first implementation above to give the following model.  Note that the parameters &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; have been replaced with &lt;code&gt;vol&lt;/code&gt;, the volatitlity of the stock. We use &lt;code&gt;vol&lt;/code&gt; in our code instead of the Greek letter &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;binomial_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Implements the binomial option pricing model to price a European call option on a stock&lt;/span&gt;
&lt;span class="sd"&gt;    S - stock price today&lt;/span&gt;
&lt;span class="sd"&gt;    K - strike price of the option&lt;/span&gt;
&lt;span class="sd"&gt;    T - time until expiry of the option&lt;/span&gt;
&lt;span class="sd"&gt;    r - risk-free interest rate&lt;/span&gt;
&lt;span class="sd"&gt;    vol - the volatility of the stock&lt;/span&gt;
&lt;span class="sd"&gt;    N - number of steps in the model&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
    &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vol&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are only two changes here from the implementation above. First, our model now computes &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; from &lt;code&gt;vol&lt;/code&gt;. Second, we used the fact that &lt;span class="math"&gt;\(d = 1/u = u^{-1}\)&lt;/span&gt; to write
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation*}
S u^m d^{N-m} = S u^m (u^{-1})^{N-m} = S u^m u^{m-N} = S u^{2m - N},
\end{equation*}&lt;/div&gt;
&lt;p&gt;
simplifying our computation of the final price of the stock.&lt;/p&gt;
&lt;p&gt;Let's see how this implementation performs with the previous example we computed by hand. We won't be able to exactly replicate that example, since before we had chosen &lt;span class="math"&gt;\(u = 1.2\)&lt;/span&gt; and &lt;span class="math"&gt;\(d = 0.8\)&lt;/span&gt;, and therefore we don't have that &lt;span class="math"&gt;\(ud = 1\)&lt;/span&gt;. Instead, we'll choose the volatility to match &lt;span class="math"&gt;\(u\)&lt;/span&gt;, which we can see is done by choosing &lt;code&gt;vol&lt;/code&gt; &lt;span class="math"&gt;\(= \log(1.2)\)&lt;/span&gt;. Then, finding prices for various values of &lt;span class="math"&gt;\(N\)&lt;/span&gt;, we have:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;With {:3d} steps, the price is {:.2f}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;binomial_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;With   1 steps, the price is 9.09
With   2 steps, the price is 6.44
With  10 steps, the price is 7.08
With 100 steps, the price is 7.25
With 200 steps, the price is 7.25
With 300 steps, the price is 7.26
With 400 steps, the price is 7.26
With 500 steps, the price is 7.26
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We've fixed the issue from before - now, the values of &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(d\)&lt;/span&gt; are recomputed as we change &lt;span class="math"&gt;\(N\)&lt;/span&gt;.  As &lt;span class="math"&gt;\(N\)&lt;/span&gt; increases, we see that the price given by the model converges fairly quickly to the value of &amp;dollar;7.26, which we will take to be a fair price for the option.&lt;/p&gt;
&lt;h3&gt;Analyzing the Performance&lt;/h3&gt;
&lt;p&gt;To end this post, we'd like to understand how well our algorithm performs, and specifically how quickly it converges on a particular value. That is, we've seen that increasing &lt;span class="math"&gt;\(N\)&lt;/span&gt; increases the accuracy of the price, so how large does &lt;span class="math"&gt;\(N\)&lt;/span&gt; need to be to ensure that we've found a good price? If getting an accurate price requires using millions of steps and therefore requires a long computation time, the algorithm will be useless. Another difficulty is that this question of the rate of convergence assumes that the algorithm does in fact actually converge to some value. Put mathematically, if we fix all of the parameters in our model except &lt;span class="math"&gt;\(N\)&lt;/span&gt; and let &lt;span class="math"&gt;\(f(N)\)&lt;/span&gt; denote the output of the algorithm for a particular number of steps, does &lt;span class="math"&gt;\(\displaystyle\lim_{N \rightarrow \infty} f(N)\)&lt;/span&gt; exist?&lt;/p&gt;
&lt;p&gt;The answer, in this particular case, is yes. If fact, with some more sophisticated mathematics one can show that this limit always exists, and that in fact there is a relatively simple formula that allows us to compute the value of any European call (or put) option from the parameters &lt;span class="math"&gt;\(S, K, T, r,\)&lt;/span&gt; and &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt;.  This formula is known as the &lt;a href="https://en.wikipedia.org/wiki/Blackâ€“Scholes_model#Blackâ€“Scholes_formula"&gt;Black-Scholes formula&lt;/a&gt;. We won't give the exact formula in this post, but it's simple enough that it can be computed essentially instantaneously by a computer, while our model will take a perhaps a second or two to run with &lt;span class="math"&gt;\(N = 1000\)&lt;/span&gt; steps on a basic laptop.&lt;/p&gt;
&lt;p&gt;So why have we done all of this work with the binomial model when there's an arguably simpler and faster formula for the option price? There are two main reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;This binomial model is one method to derive the Black-Scholes formula. As stated above, the Black-Scholes formula is essentially the limit of our our model as &lt;span class="math"&gt;\(N \rightarrow \infty\)&lt;/span&gt;. This isn't the original way that this formula was derived, but this method requires less advanced mathematics than other methods. The derivation through the binomial method uses no math more difficult than standard probability theory, while other methods involve more difficult techniques like stochastic calculus.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The binomial model can be used in situations where a simple "limit" formula doesn't exist.  For example, we've so far only dealt with European options, which can only be exercised at one particular time.  By contrast, &lt;em&gt;American&lt;/em&gt; options give the right to exercise the option at &lt;em&gt;any&lt;/em&gt; time before expiry, and the possiblity of early exercise makes them more difficult to price.  Depending on the exact nature of the American option, it is not always possible to find a Black-Scholes style formula, and the only way to price the option is using a numerical approximation like our binomial model.  We'll explore this more in the next post.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, even though we have a quick formula to give us the "correct" answer, it's instructive to see how well our binomial method works to find that answer.  In particular, how large does &lt;span class="math"&gt;\(N\)&lt;/span&gt; need to be in order for the model price to match the Black-Scholes price?  &lt;/p&gt;
&lt;p&gt;We investigate this in the chart below. In the chart, we use our model to find a price for a European call option with &lt;span class="math"&gt;\(S = 100\)&lt;/span&gt;, &lt;span class="math"&gt;\(K = 120\)&lt;/span&gt;, &lt;span class="math"&gt;\(T = 1\)&lt;/span&gt;  year, &lt;span class="math"&gt;\(r = 1\%\)&lt;/span&gt;, and &lt;span class="math"&gt;\(\sigma = 0.2\)&lt;/span&gt;. These values were chosen arbitrarily.  The number of steps used in the model is on the &lt;span class="math"&gt;\(x\)&lt;/span&gt;-axis.  The price is plotted on the &lt;span class="math"&gt;\(y\)&lt;/span&gt;-axis.  The red horizontal line is the price for the option given by the Black-Scholes formula - in this case, &amp;dollar;2.34. The dotted horizontal lines are at 2.335 and 2.345, so that any value between those lines would agree with the Black-Scholes price to the nearest cent.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Convergence of the Binomial Model" src="http://www.josephthurman.com/binomialconvergence.png"&gt;&lt;/p&gt;
&lt;p&gt;We can see that, in this particular case, our model converges fairly quickly - it only takes around 200 steps for the model price to be accurate within rounding error.  Note that our option has an expiration time of 1 year, and there are roughly 250 trading days in a year, so our model is fairly accurate if we take the step size to be about one trading day.&lt;/p&gt;
&lt;h3&gt;Next time - Beyond European Calls&lt;/h3&gt;
&lt;p&gt;We now have a workable model to give prices for European call options on stocks, and a straightforward and fairly efficient implementation of the model in Python.  Next time, we'll finish our discussion of this method by seeing how to modify our implementation to find prices for other type of options, including the American options discussed above.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="finance"></category><category term="binomial-model"></category><category term="python"></category></entry><entry><title>The Binomial Options Pricing Model</title><link href="http://www.josephthurman.com/binomial2.html" rel="alternate"></link><published>2018-03-02T14:00:00-05:00</published><updated>2018-03-02T14:00:00-05:00</updated><author><name>Joseph Thurman</name></author><id>tag:www.josephthurman.com,2018-03-02:/binomial2.html</id><summary type="html">&lt;p&gt;In the &lt;a href="http://www.josephthurman.com/binomial1.html"&gt;previous post&lt;/a&gt; introducing the Binomial Options Pricing Model, we discussed a very simple model for the movement of stock prices. In that model, we assumed that at the end of a certain period of time, the value of a stock could take on one of two possible values â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the &lt;a href="http://www.josephthurman.com/binomial1.html"&gt;previous post&lt;/a&gt; introducing the Binomial Options Pricing Model, we discussed a very simple model for the movement of stock prices. In that model, we assumed that at the end of a certain period of time, the value of a stock could take on one of two possible values.  We then used a variety of arguments, including replication and risk-neutral pricing, to determine a price for a call option on the stock.  &lt;/p&gt;
&lt;p&gt;In this post, we'll see how this model can be improved to predict the movement of stock prices more accurately. We'll also make some simple modifications that allow us to consider some of the complicating factors we ignored in the last post, like interest rates.&lt;/p&gt;
&lt;h3&gt;The Two-Step Model&lt;/h3&gt;
&lt;p&gt;Let's return to the example from the previous post, in which we assumed that a stock worth &amp;dollar;100 today would be worth either &amp;dollar;80 or &amp;dollar;120 in six months' time.  We used this assumption to find a price for a call option on the stock, expiring at the end of the same six-month period with a strike price of &amp;dollar;100.  &lt;/p&gt;
&lt;p&gt;This model essentially assumed that there would be only one movement in the stock price in 6 months, or put another way, that we would only observe the stock price once over the life of the option. What if we looked multiple times?&lt;/p&gt;
&lt;p&gt;In particular, instead of assuming that the stock could either increase or decrease by &amp;dollar;20 over a six-month period, let's assume that the stock can either increase or decrease by &amp;dollar;10 over each three-month period.  There are now four different possibilities for how the stock price can change as over the six-month period - it can either move up twice, move up and then down, move down and then up, or move down twice.  Letting &lt;span class="math"&gt;\(u, d\)&lt;/span&gt; denote up and down movements, respectively, and using &lt;span class="math"&gt;\(S\)&lt;/span&gt; to denote the stock price today, &lt;span class="math"&gt;\(S_{u}\)&lt;/span&gt; to denote the price after an up movement, &lt;span class="math"&gt;\(S_{du}\)&lt;/span&gt; denote the price after a down and then an up movement, etc., we're left with the following tree of possible prices for the stock.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Two-Step Binomial Tree" src="http://www.josephthurman.com/tree1.png"&gt;&lt;/p&gt;
&lt;p&gt;It's important to note that the price after an up movement in the first period followed by a down movement in the second period is the same as the price after a down movement followed by an up movement.  This will simplify the computations, especially when we fully generalize the model to include many intermediate steps.  The order of the up and down movements does not matter, only the total number of up movements and the total number down movements.&lt;/p&gt;
&lt;p&gt;How do we find a price for the option under this new model? The method is to view this larger tree as a collection of smaller one-step models and repeatedly apply the pricing methods we described in the last post.  In particular, we can zoom in on just one part of the tree, the portion consisting of &lt;span class="math"&gt;\(S_u\)&lt;/span&gt; and the branches to &lt;span class="math"&gt;\(S_{uu}\)&lt;/span&gt; and &lt;span class="math"&gt;\(S_{ud}\)&lt;/span&gt;. If the final price is &lt;span class="math"&gt;\(S_{uu} = 120\)&lt;/span&gt;, then the option will be worth &amp;dollar;20, and if the final price is &lt;span class="math"&gt;\(S_{ud} = 100\)&lt;/span&gt;, then the option will be worth &amp;dollar;0.  We can then find the value of the option in three months time, assuming that the stock increased over the first period.  The easiest method for this is to use risk-neutral pricing.  We can compute that the risk-neutral probability in this situation is &lt;span class="math"&gt;\(p = 1/2\)&lt;/span&gt; (just as it was in the last post), and therefore the value of the option at the &lt;span class="math"&gt;\(S_u\)&lt;/span&gt; node of the tree is
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation*}
C_u = 20 (1/2) + 0 (1/2) = 10
\end{equation*}&lt;/div&gt;
&lt;p&gt;We can repeat this computation to find the value of the option at the &lt;span class="math"&gt;\(S_d\)&lt;/span&gt; node in the tree, that is, the value of the option in three month's time under the assumption that the stock first moves down.  From an initial value of &lt;span class="math"&gt;\(S_d = 90\)&lt;/span&gt;, the stock price can either move to &lt;span class="math"&gt;\(S_{dd} = 80\)&lt;/span&gt; or &lt;span class="math"&gt;\(S_{du} = 100\)&lt;/span&gt;.  In either case, the option will be worthless in six months (the strike price is 100), and therefore the value of the option at the &lt;span class="math"&gt;\(S_d\)&lt;/span&gt; node is zero.&lt;/p&gt;
&lt;p&gt;Finally, if we know that the values &lt;span class="math"&gt;\(C_u = 10\)&lt;/span&gt; and &lt;span class="math"&gt;\(C_d = 0\)&lt;/span&gt; for the option at the &lt;span class="math"&gt;\(S_u\)&lt;/span&gt; and &lt;span class="math"&gt;\(S_d\)&lt;/span&gt; nodes, then we can work backwards to find the initial value of the option.  The risk-neutral probability will once again be &lt;span class="math"&gt;\(p = 1/2\)&lt;/span&gt;, and so the value of the option today is
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation*}
C = 10 \times (1/2) + 0 \times (1/2) = 5
\end{equation*}&lt;/div&gt;
&lt;p&gt;
The tree with the value of the option at the various nodes is shown below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Option Values in Two-Step Binomial Tree" src="http://www.josephthurman.com/tree2.png"&gt;&lt;/p&gt;
&lt;p&gt;This value is different from the value of &amp;dollar;10 we found in the last post, but it's not hard to see why.  In the one-step model, we only had two possible values for the stock price at expiry, one in which the option has value (an up movement) and one in which it does not (a down movement). In the two step model, we have assumed that there are more possible values for the final price of the stock, and the option is worthless for these new possible values.  Thus under the new model there will be fewer opportunities to exercise the option and gain value from it, and so the option is worth less in the new model.&lt;/p&gt;
&lt;p&gt;It's clear from the above example how we could continue to improve the model - instead of dividing the six-month time period into two three-month periods, we could divide it into 3, 4, 5, or even more periods.  Perhaps we could divide the interval into 20 periods, and the price could move up or down by one dollar in each period.  This would still imply that the stock price at the end of six months has a value between &amp;dollar;80 or &amp;dollar;120, but in this case any dollar value between these two numbers is also a possible outcome in the model, which is a much more realistic model than the two or three values we've had in the examples so far. Before discussing this generalization, though, we will consider how interest rates affect the model.  &lt;/p&gt;
&lt;h3&gt;Adding Interest Rates&lt;/h3&gt;
&lt;p&gt;So far, we've ignored how interest rates and the time value of money would change our computations.  For example, in computing the value &lt;span class="math"&gt;\(C_u\)&lt;/span&gt; above, we assumed that if the option was expected to be worth &amp;dollar;10 at the end of the six-month period, its value at three months should be the same.  This is not the case, though, as the value of &amp;dollar;10 today is more than the value of &amp;dollar;10 in three month's time.  After all, if an investor has &amp;dollar;10 today, they could always a put the money into a completely safe investment, perhaps something like a savings account, and earn a small amount of interest so that, after three months time they have &amp;dollar;10.01 instead of just &amp;dollar;10.  &lt;/p&gt;
&lt;p&gt;The value of a payment therefore depends not only on the actual dollar amount of the payment, but on when the payment is made.  To be consistent in finding prices for financial assets, we need a way to find the value today of a payment made in the future, so that all prices under consideration are always in "today's" dollars. The idea is that if one will receive &amp;dollar;&lt;span class="math"&gt;\(Y\)&lt;/span&gt; in &lt;span class="math"&gt;\(T\)&lt;/span&gt; month's time, the value of that payment &lt;em&gt;today&lt;/em&gt; is the amount of money that would have to be invested today in a risk-free investment so that in &lt;span class="math"&gt;\(T\)&lt;/span&gt; months that safe investment will have grown to &lt;span class="math"&gt;\(Y\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Risk-free investments do not actually exist in truth, but mathematical finance generally assumes that such investments are available. This is because short-term bonds issued by stable governments in their own currency are very safe investments. There is of course the possibility that, say, the US government may default on its debt, but this would have such major economic effects that accurately pricing options would be the least of an investor's worries. Still, because these assets have no risk, the rate of return is small - the current yield on three-month treasury bills is around 1.5% annually. The rate of return of the risk-free investment is appropriately known as the &lt;em&gt;risk-free rate&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To simplify computations, we'll assume that all interest is compounded continuously.  That is, if &lt;span class="math"&gt;\(r\)&lt;/span&gt; is the risk-free interest rate, written as a decimal (so that 1.5% = 0.015), then if one invests &lt;span class="math"&gt;\(P\)&lt;/span&gt; dollars for a period of &lt;span class="math"&gt;\(t\)&lt;/span&gt; years, the investment will grow to &lt;span class="math"&gt;\(Pe^{rt}\)&lt;/span&gt;, where &lt;span class="math"&gt;\(e = 2.71828\ldots\)&lt;/span&gt; is Euler's number, the base of the natural logarithm. On the other hand, a cash payment of &lt;span class="math"&gt;\(X\)&lt;/span&gt; dollars at some time &lt;span class="math"&gt;\(t\)&lt;/span&gt; years in the future will have a present value today of &lt;span class="math"&gt;\(Xe^{-rt}\)&lt;/span&gt;. We'll use this present value formula in the next section to compute the value of an option today if its future expected value is known. The number &lt;span class="math"&gt;\(e^{-rt}\)&lt;/span&gt; is called a &lt;em&gt;discount factor&lt;/em&gt;, since it is used to discount future values of a cash flow to their smaller present values.  &lt;/p&gt;
&lt;p&gt;Note that the risk-free interest rate, and the related discount factor, are only appropriate for finding the present value of risk-free assets.  In general, if we wanted to find the present value of a future payment that had some amount of uncertainty, we'd need to choose an interest rate that reflected the uncertainty.  We could think of this as the rate of return that could be expected from investing our money in an equally risky asset. The expected values of the options we are pricing are technically risky, so in principle we should be finding a discount factor that reflects those risks.  This represents one more advantage of risk-neutral pricing - we can avoid the work of having to decide on a discount factor that is appropriate to the risk of the option. Instead, we ignore the risk, as we've done before, and use the risk-free interest rate to simplify our computations.&lt;/p&gt;
&lt;h3&gt;The Many-Step Model&lt;/h3&gt;
&lt;p&gt;With interest rates figured out, we're now ready to give the actual model. There's just one final change to make. In our two-step example above, we've assumed that the stock price moves by adding or subtracting fixed amounts.  In our final model, we'll instead assume that the price moves by a fixed &lt;em&gt;percentage&lt;/em&gt; in each period.  This turns out to more accurately model the movement of stock prices, as we'll discuss in a later post.&lt;/p&gt;
&lt;p&gt;We'll also abandon the numbers we used in our specific examples and replace them with variables. Let &lt;span class="math"&gt;\(S\)&lt;/span&gt; denote the price of the stock today, and let &lt;span class="math"&gt;\(T\)&lt;/span&gt; denote the time until expiry of the option, in years.  We'll divide this period into &lt;span class="math"&gt;\(N\)&lt;/span&gt; equal time intervals, of length &lt;span class="math"&gt;\(\Delta T = T / N\)&lt;/span&gt;.  Finally, assume that in each time period, the stock price changes by either multiplying by &lt;span class="math"&gt;\(u\)&lt;/span&gt;, which we consider as an up movement, or by &lt;span class="math"&gt;\(d\)&lt;/span&gt;, the down movement. For example, if we assume that a stock can grow by 2% over a short time interval, then we pick &lt;span class="math"&gt;\(u = 1.02\)&lt;/span&gt;.  Thus after one period, the stock will have a value of either &lt;span class="math"&gt;\(Su\)&lt;/span&gt; or &lt;span class="math"&gt;\(Sd\)&lt;/span&gt;.  We need to assume &lt;span class="math"&gt;\(d &amp;lt; e^{r\Delta T} &amp;lt; u\)&lt;/span&gt;, where &lt;span class="math"&gt;\(r\)&lt;/span&gt; is the risk-free interest rate, to avoid the possibility of arbitrage.&lt;/p&gt;
&lt;p&gt;We can then consider a tree of possible prices for the stock.  If &lt;span class="math"&gt;\(k\)&lt;/span&gt; time periods have passed, then the stock price at that time is determined by the number of up and down movements in the stock.  Since the order of the stock movements does not matter, we have that if &lt;span class="math"&gt;\(k\)&lt;/span&gt; time periods have passed and the stock price has increased over &lt;span class="math"&gt;\(m\)&lt;/span&gt; of those periods (and therefore decreased over &lt;span class="math"&gt;\(k-m\)&lt;/span&gt; of those periods), the price of the stock at that time is
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation*}
S(k,m) = Su^{m}d^{k-m}
\end{equation*}&lt;/div&gt;
&lt;p&gt;
This explains why this model is known as the binomial model - the price of the stock could be determined by flipping a coin &lt;span class="math"&gt;\(k\)&lt;/span&gt; times and assuming that the stock moves up each time a head appears. More properly, we should consider a weighted coin that has a probability &lt;span class="math"&gt;\(p\)&lt;/span&gt; of coming up heads. The so-called "binomial distribution" is the distribution in probability used to model coin flips.&lt;/p&gt;
&lt;p&gt;We can now use the tree of stock prices produced by this formula to find the value of the option.  Assume we're pricing a call option with strike price &lt;span class="math"&gt;\(K\)&lt;/span&gt;. We can easily find the value of the option at the expiry in each of the possible nodes of the tree.  Under our model, the price of the stock has &lt;span class="math"&gt;\(N+1\)&lt;/span&gt; possible values at expiry, depending on the number of up-movements in the stock.  For each of these possible stock prices, the option is worth
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation*}
C(N,m) = \max(S(N,m) - K, 0)
\end{equation*}&lt;/div&gt;
&lt;p&gt;
(Here &lt;span class="math"&gt;\(m\)&lt;/span&gt; can be any of the values &lt;span class="math"&gt;\(m = 0,1, \ldots, N\)&lt;/span&gt;). Interpreting the above formula, the option is worth the difference between the price of the stock and the strike price if the stock is worth more than the strike, and zero otherwise (the case in which the option is not exercised).&lt;/p&gt;
&lt;p&gt;Once we know the value of the option at the end of the tree, we can work backward as before to figure out the value of the option at every node. Let &lt;span class="math"&gt;\(C(k,m)\)&lt;/span&gt; denote the value of the option at the node that is &lt;span class="math"&gt;\(k\)&lt;/span&gt; steps into the tree with &lt;span class="math"&gt;\(m\)&lt;/span&gt; up movements in the stock price.  The two following nodes in the tree are &lt;span class="math"&gt;\(C(k+1,m+1)\)&lt;/span&gt; (if the price moves up) and &lt;span class="math"&gt;\(C(k+1,m)\)&lt;/span&gt; (if the price moves down).  If we let &lt;span class="math"&gt;\(p\)&lt;/span&gt; denote the risk-neutral probability of a movement up, then the expected value of the option in the next step is
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation*}
p C(k+1,m+1) + (1-p) C(k+1,m)
\end{equation*}&lt;/div&gt;
&lt;p&gt;
and so the value of the option at &lt;span class="math"&gt;\(C(k,m)\)&lt;/span&gt; is the above expected value, discounted to today using the risk-free interest rate.  That is
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation*}
C(k,m) = e^{-r \Delta T} \left( p C(k+1,m+1) + (1-p) C(k+1,m) \right)
\end{equation*}&lt;/div&gt;
&lt;p&gt;
With this formula, we can work our way backward through the tree until we can compute the value &lt;span class="math"&gt;\(C(0,0)\)&lt;/span&gt;, which is the value of the option today, and therefore the price.&lt;/p&gt;
&lt;p&gt;Finally, we need to find the value of the risk-neutral probability.  From our discussion in the last section, it should be chosen so that the stock price at any node in the tree is equal to the expected value of the stock price in the child nodes, appropriately discounted. That is, we need to chose the &lt;span class="math"&gt;\(p\)&lt;/span&gt; such that the following formula is satisfied:
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation*}
S(k,m) =  e^{-r \Delta T} \left( p S(k+1,m+1) + (1-p) S(k+1,m) \right)
\end{equation*}&lt;/div&gt;
&lt;p&gt;
Using the formula &lt;span class="math"&gt;\(S(k,m) = Su^{m}d^{k-m}\)&lt;/span&gt;, we can solve this equation to find that the risk-neutral probability is
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation*}
p = \frac{e^{r \Delta T} - d}{u-d}
\end{equation*}&lt;/div&gt;
&lt;p&gt;Note that this formula does not depend on the values of &lt;span class="math"&gt;\(k\)&lt;/span&gt; and &lt;span class="math"&gt;\(m\)&lt;/span&gt;, so that the risk-neutral probability is the same everywhere in the tree. In contrast, we could consider using the replication method discussed in the previous post to compute the value of the option at each node. If we tried this, however, we'd notice that in general the payoffs at the child nodes are different as we move through the tree. Therefore we'd have to find a different replicating portfolio for every node, which would be a lot more work. Using risk-neutral pricing allows us to avoid these unnecessary computations and greatly simplifies the model.&lt;/p&gt;
&lt;h3&gt;Summarizing the Model&lt;/h3&gt;
&lt;p&gt;And that's it! After a good deal of work, we've found a model that can be used to find the price of a European call option on a stock.  The model is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Divide time until expiry of the option into &lt;span class="math"&gt;\(N\)&lt;/span&gt; intervals.  On each interval, assume that the stock can move up or down by a factor of &lt;span class="math"&gt;\(u\)&lt;/span&gt; or &lt;span class="math"&gt;\(d\)&lt;/span&gt;, respectively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This assumption generates a tree of possible prices for the stock.  At the leaves of the tree, we can find the value of the option for the given stock price represented by that node by using the payoff determined by the option contract.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Working back through the tree, we can find the value of the option at any node as long as we know the value of the option at the two child nodes.  We do this by finding the expected value of the option at those two child nodes using the risk-neutral probability, then discounting that value using the risk-free interest rate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This process continues until the value of the option at the root node, representing the value today, is found, which is the price of the option.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The model uses three properties of the option that are known, namely the stock price today, the strike price of the option, and the time until expiry. It also takes as input the value &lt;span class="math"&gt;\(r\)&lt;/span&gt; for the risk-free interest rate available in the market. The model also has three "tuning parameters" that we can choose ourselves, namely the size of the movements &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(d\)&lt;/span&gt; and the number of steps in the tree &lt;span class="math"&gt;\(N\)&lt;/span&gt;. If we want our model to be useful, we still need to decide how to choose these parameters.&lt;/p&gt;
&lt;p&gt;As we saw above, our model is more accurate the more steps we include. Of course increasing &lt;span class="math"&gt;\(N\)&lt;/span&gt; increases the number of nodes in our tree, and so larger values of &lt;span class="math"&gt;\(N\)&lt;/span&gt; will take longer to compute.  Therefore, we should choose &lt;span class="math"&gt;\(N\)&lt;/span&gt; as large as possible while still making sure that our algorithm is computationally feasible. We'll discuss this more in the next post, when we actually implement this model in Python and analyze its performance.&lt;/p&gt;
&lt;p&gt;Choosing &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(d\)&lt;/span&gt; is more difficult. There are good techniques for choosing these values, but understanding them requires making some more explicit assumptions about the movement of stock prices which we'll discuss in a later post. For now, it's enough to say that choosing &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(d\)&lt;/span&gt; amounts to forecasting the future movement of the stock. We'll therefore choose them somewhat arbitrarily, picking feasible values and tweaking them as necessary so that the range of possible stock prices in the model accords with whatever prediction about the future movement of the stock we wish to make.  &lt;/p&gt;
&lt;h3&gt;Next Time - Implementing the Model&lt;/h3&gt;
&lt;p&gt;Now that we've found a model we can use, it's time to actually put it into practice.  In the next post, we'll implement this model in Python and run it on a few simple examples. We'll also analyze its performance, and see how our implementation can be used to price other types of options as well.  &lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="finance"></category><category term="binomial-model"></category></entry><entry><title>Introduction to Pricing Options with Binomial Trees</title><link href="http://www.josephthurman.com/binomial1.html" rel="alternate"></link><published>2018-02-16T12:00:00-05:00</published><updated>2018-02-16T12:00:00-05:00</updated><author><name>Joseph Thurman</name></author><id>tag:www.josephthurman.com,2018-02-16:/binomial1.html</id><summary type="html">&lt;p&gt;A lot of work in mathematical finance is related to the pricing of financial derivatives, that is, financial assets that have values that depend on (that is, values that are derived from) the value of another asset. Some of the simplest derivatives are &lt;em&gt;European call&lt;/em&gt; and &lt;em&gt;put&lt;/em&gt; options. In this â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;A lot of work in mathematical finance is related to the pricing of financial derivatives, that is, financial assets that have values that depend on (that is, values that are derived from) the value of another asset. Some of the simplest derivatives are &lt;em&gt;European call&lt;/em&gt; and &lt;em&gt;put&lt;/em&gt; options. In this post, we'll explain what these options are, and then describe a very simple model, the (one step) &lt;em&gt;Binomial Options Pricing Model&lt;/em&gt;, that can be used to find prices for these options. In the next post, we'll see how this model can be improved and expanded.&lt;/p&gt;
&lt;h3&gt;European Call and Put Options&lt;/h3&gt;
&lt;p&gt;A European &lt;em&gt;call&lt;/em&gt; option is a contract that gives one investor, who is said to have the &lt;em&gt;long&lt;/em&gt; position in the contract, the option (but not the obligation) to &lt;em&gt;buy&lt;/em&gt; a particular asset at specified future time, called the &lt;em&gt;expiration time&lt;/em&gt; of the option, for a price specified at the time the contract is made.  This price is called the &lt;em&gt;strike&lt;/em&gt; price. Their counterparty, who must agree to sell at that particular price, is said to hold the &lt;em&gt;short&lt;/em&gt; position in the contract. For a European &lt;em&gt;put&lt;/em&gt; option, the investor holding the long position has the option to &lt;em&gt;sell&lt;/em&gt; a particular asset at a specified time and price, while the person taking the short position agrees to buy at that price.  &lt;/p&gt;
&lt;p&gt;It is important to note that long positions in options are always truly optional. That is, if a person holds a long position in a call option with a strike price of &amp;dollar;100, but the underlying asset's price is only &amp;dollar;95 when the option expires, they can simply chose not to &lt;em&gt;exercise&lt;/em&gt; their option, and buy the asset at the lower market price if they wish.  The short position in an option, though, carries an obligation. The holder of a short position in a call option, for example, is forced to sell an asset at a lower price than the market price if the call option is exercised.&lt;/p&gt;
&lt;p&gt;What are options good for? An investor might wish to purchase a call option on a stock if they believe the stock price is likely to go up.  For example, say that a particular stock has a price of &amp;dollar;100 today.  If an investor believes that the stock price is likely to increase over six months, say to &amp;dollar;120, they might purchase a call option to buy the stock for a strike price of &amp;dollar;100 in six months.  If their prediction is correct, then in 6 months time they can exercise the call option to buy the stock for only &amp;dollar;100, then immediately resell in the normal market for &amp;dollar;20, netting a &amp;dollar;20 profit.  &lt;/p&gt;
&lt;p&gt;Of course, if the investor thinks that the stock will be worth &amp;dollar;120, they could just buy the stock now for &amp;dollar;100 and make a &amp;dollar;20 profit in six months when they sell - what do they need the option for?  The option is an attractive investment because it is much cheaper to own than the stock itself. As we'll see below, the option on the stock above might cost in the neighborhood of &amp;dollar;10, so the investor could double their money with the option. This strategy is riskier, though - if the investor spends &amp;dollar;100 on the stock and it goes down to &amp;dollar;90, they've only lost &amp;dollar;10, while if the investor spends &amp;dollar;100 on 20 options and the price goes down, they lose their entire investment.&lt;/p&gt;
&lt;p&gt;The above is a description of the use of options for speculating in the market, but they can also be used like a type of insurance to hedge risk.  If an investor already owned that same &amp;dollar;100 stock and was worried that the value could drop drastically, they might purchase a put option with a strike price of &amp;dollar;90.  If the stock dives to &amp;dollar;80, they'll still be able to sell for &amp;dollar;90, limiting their loss to &amp;dollar;10 instead of &amp;dollar;20.  &lt;/p&gt;
&lt;h3&gt;The Simplest Binomial Model&lt;/h3&gt;
&lt;p&gt;Let's consider the simplest possible scenario in which to price a European call option. Say that a stock has a price today of &amp;dollar;100 (all prices will be in dollars, so we'll sometimes drop the dollar signs for convenience).  And let's assume that in six months' time, the stock will take one of only two possible values&amp;mdash;either increasing 20% to 120, or decreasing 20% to 80.  Consider a European call option for the stock with a strike price of 100 that expires in six months.  What is a fair price to pay for this option?&lt;/p&gt;
&lt;p&gt;To decide on a price, we see that if we hold the option and the stock goes up, then we'll be able to exercise the option to make a profit of 20. If the stock price goes down, then at expiry there will be no reason to use the option and it will expire worthless for a profit of 0.  To find a price for this option, we will &lt;em&gt;replicate&lt;/em&gt; these possible cash flows using a combination of stocks and cash. (We use cash in this discussion to avoid discussing interest rates, which will be discussed in the next post.) Here, we're using one of the bedrock assumptions of mathematical finance, the "no-arbitrage" condition.  This condition says that if two different portfolios involve identical cashflows, then the portfolios must have exactly the same value. The price we'll find for the option is therefore called the &lt;em&gt;arbitrage-free&lt;/em&gt; price.&lt;/p&gt;
&lt;p&gt;Consider a portfolio that consists of &lt;span class="math"&gt;\(a\)&lt;/span&gt; shares of the stock and &lt;span class="math"&gt;\(b\)&lt;/span&gt; dollars in cash. That is, if &lt;span class="math"&gt;\(S\)&lt;/span&gt; is the price of the stock, the value of the portfolio is &lt;span class="math"&gt;\(P = aS + b\)&lt;/span&gt;.  We'd like this portfolio to have the same cash flows as the option, that is, in six months if &lt;span class="math"&gt;\(S = 80\)&lt;/span&gt;, we wish for &lt;span class="math"&gt;\(P = 0\)&lt;/span&gt;, while if &lt;span class="math"&gt;\(S = 120\)&lt;/span&gt;, then &lt;span class="math"&gt;\(P = 20\)&lt;/span&gt;. You might recognize from these formulas that we're trying to choose the linear function &lt;span class="math"&gt;\(P(S)\)&lt;/span&gt; so that it has two particular values, &lt;span class="math"&gt;\(P(80) = 0\)&lt;/span&gt; and &lt;span class="math"&gt;\(P(120) = 20\)&lt;/span&gt;, and since two points always determine a unique line, we can solve to find that we should have &lt;span class="math"&gt;\(a = 1/2\)&lt;/span&gt; and &lt;span class="math"&gt;\(b = -40\)&lt;/span&gt;. Thus, if we have a portfolio that consists &lt;span class="math"&gt;\(1/2\)&lt;/span&gt; a stock and &lt;span class="math"&gt;\(-b\)&lt;/span&gt; dollars, this portfolio will have exactly the same payout as the option in 6 months, and therefore the value of the portfolio today must be the value of the option today.  Since the portfolio is worth &lt;span class="math"&gt;\((1/2) \times 100 - 40 = 10\)&lt;/span&gt; today, the price of the option must be &amp;dollar;10.&lt;/p&gt;
&lt;p&gt;There are still two issues to consider. First, this method of pricing requires us to own half a share in a stock, which is generally not possible.  In practice, this isn't actually an issue. We've assumed that the option contract we're pricing gives the option to buy or sell only one share of stock, but options generally involve 100 shares of stock.  Thus instead of buying 1/2 a stock, our argument above essentially says that we'd need to buy half of the number of shares specified in the option contract, that is, 50 shares.  The other issue is interpreting the negative value of &lt;span class="math"&gt;\(b\)&lt;/span&gt;.  Here &lt;span class="math"&gt;\(b = -40\)&lt;/span&gt; means that the portfolio includes an obligation to make a payment of &amp;dollar;40 six months in the future, which we can think of as a repayment of a loan.&lt;/p&gt;
&lt;p&gt;To summarize, if an investor wants to buy the call option on this stock we've discussed, they have two options. First, they could just buy the option itself, for a cost of &amp;dollar;&lt;span class="math"&gt;\(C\)&lt;/span&gt;, and in six months they'll either receive &amp;dollar;20 or &amp;dollar;0 from the option, depending on whether the stock moves up or down.  On the other hand, they could take &amp;dollar;10 and take out an additional six-month loan of &amp;dollar;40, and use the combined sum to buy half a stock.  In 6 months, they can sell that half-share of stock and repay the loan. The payout from this process is identical to the payout of the call option, and this process costs &amp;dollar;10. Since the portfolio of stock and a loan replicates the payouts of the option, the prices are the same, and the option's price is &lt;span class="math"&gt;\(C=10\)&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;Risk-Neutral Pricing&lt;/h3&gt;
&lt;p&gt;Although the replication argument above works well in this simple case, we'll see in the next post that it can be difficult to generalize to more complicated models and situations.  For those situations, there is an alternate method to find the price of the option, using so called &lt;em&gt;risk-neutral&lt;/em&gt; pricing.&lt;/p&gt;
&lt;p&gt;One surprising fact about the replication argument is that it didn't include any probabilities. Let's momentarily ignore the argument above, and try to find the correct price of the option using probabilities. If we assume that the probability of the stock price increasing is &lt;span class="math"&gt;\(p\)&lt;/span&gt; (and therefore that the probability of a decrease is &lt;span class="math"&gt;\(1-p\)&lt;/span&gt;), then the expected value of the option 6 months from now is
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation*}
E(C) = 20 \cdot p + 0\cdot(1-p) = 20p
\end{equation*}&lt;/div&gt;
&lt;p&gt;
Since the option is expected to be worth &lt;span class="math"&gt;\(20p\)&lt;/span&gt; at expiry, if we ignore interest rates (and risk, see below), its value today should be the same as well. We've found a price for the option, then, once we can determine a value for &lt;span class="math"&gt;\(p\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Of course, the probability could in principle have any value between 0 and 1, and different investors might have different ideas of what the probability is.  There is one special value that &lt;span class="math"&gt;\(p\)&lt;/span&gt; could take, the so called &lt;em&gt;risk-neutral&lt;/em&gt; probability, that it turns out is better than all the others for pricing the option.&lt;/p&gt;
&lt;p&gt;To find this probability, we can again perform an expected value calculation, but this time find the expected value of the stock in the future.  We then have
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation*}
E(S) = 120\cdot p + 80 \cdot(1-p) = 80 + 40p
\end{equation*}&lt;/div&gt;
&lt;p&gt;
Then, similar to the above reasoning, if we &lt;em&gt;ignore the riskiness of the stock price&lt;/em&gt;, then the price today must equal the expected future value, that is
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation*}
100 = 80 + 40 p,
\end{equation*}&lt;/div&gt;
&lt;p&gt;
which we can solve to find &lt;span class="math"&gt;\(p = 1/2\)&lt;/span&gt;. This value of &lt;span class="math"&gt;\(p\)&lt;/span&gt; is called the risk-neutral probability.&lt;/p&gt;
&lt;p&gt;Why is this called the "risk-neutral" probability? It's because a normal investor should think that the value of a stock today is &lt;em&gt;less&lt;/em&gt; than the expected value of the stock in the future, because the future value is uncertain. If they thought the &amp;dollar;100 stock today would still be worth on average only &amp;dollar;100 in the future, they'd be better off just keeping their money and not taking any risk. Only an investor who is indifferent to risk would think that a stock with a risky expected value of &amp;dollar;100 in the future is also worth &amp;dollar;100 today. By equating the expected future value of the stock and the price of the stock today, we're therefore thinking like a &lt;em&gt;risk-neutral&lt;/em&gt; investor. We actually made the same assumption earlier when we said that the expected value of &lt;span class="math"&gt;\(20p\)&lt;/span&gt; for the option in the future should equal the price of the option today.&lt;/p&gt;
&lt;p&gt;Putting these arguments together, we have that if &lt;span class="math"&gt;\(p = 1/2\)&lt;/span&gt; is the risk-neutral probability, then the risk-neutral price of the option today should be &lt;span class="math"&gt;\(20 \times (1/2) = 10\)&lt;/span&gt;, the same as the arbitrage-free price we found in the previous section.&lt;/p&gt;
&lt;h3&gt;Why Risk-Neutral Pricing?&lt;/h3&gt;
&lt;p&gt;The question "Why risk-neutral pricing?" could mean two different things, either "Why does risk-neutral pricing give the same price as replication?" or "Why use risk-neutral pricing instead of replication?". We'll answer the second question more fully in the next post, where we'll see that the risk-neutral pricing method is simpler when we consider more complicated models.  The first question does require an answer, though, because at first glance risk-neutral pricing seems like exactly the wrong method. Investors are generally &lt;em&gt;not&lt;/em&gt; risk neutral, and investing is essentially all about either buying or selling risk. For example, investors are often either trying to create risk in the hope of a return (like the options speculator from earlier) or trying to hedge risks to remove uncertainty (like the use of options as insurance). How can ignoring one of the most important aspects of an investment lead to the right price?&lt;/p&gt;
&lt;p&gt;To see how, imagine that someone has cruelly forced you to &lt;em&gt;short&lt;/em&gt; the option. Recall from above that this means that, if the stock price rises above &amp;dollar;100, you'll be forced to sell the stock for a below-market price. How might you manage this risk?&lt;/p&gt;
&lt;p&gt;One method would be to buy half a share of the stock. Let's consider the value of a portfolio that consists of half a share of stock, plus the short position in the option. If the stock price goes up to 120, then the option will be exercised and you'll unfortunately lose 20 on the option.  However, you will also own half a share of the stock, which in this world will have a value of 60, and so the total value of the portfolio is 40.  On the other hand, if the stock price goes down, the option will not be exercised, and the only value in the portfolio will be half the value of the stock, which will also be 40. (Note that this gives one more demonstration that the option is worth 10 - the future value of the portfolio is 40, not matter what, so the portfolio's value today is 40, and &lt;span class="math"&gt;\(50 - 10 = 40\)&lt;/span&gt;. This also does not assume risk-neutrality, since the future value of the portfolio is certain to be 40.)&lt;/p&gt;
&lt;p&gt;It turns out that the risk in the option is completely manageable - by judiciously buying the stock related to the option, you can remove the risk inherent in the value of the option itself.  That is, instead of an uncertain position that could involve either no change in value or a loss of &amp;dollar;20, you know have a certain position that involves a final portfolio value of &amp;dollar;40 in all possible scenarios. Because the risk can be removed, it's doesn't determine the price of the option, and therefore you can use pricing methods that ignore risk to correctly price the option.&lt;/p&gt;
&lt;p&gt;Note that this argument, and the replication argument from earlier, depend on the assumption that the market for the stock and the option are well-functioning. The replication argument assumed that money can be easily borrowed, and the hedging argument in this section requires that the stock on which the option is based can be traded. Neither assumption is always true. For example, there are options that pay depending on the weather, which could be used by a farmer, for example, to receive a payment in case bad weather causes problems with a crop.  The risk in this option is harder to hedge&amp;mdash;you can't buy or sell a drought. Risk-neutral pricing methods therefore require some assumptions to be made before they can be applied, and whether or not those assumptions are reasonable can determine whether the prices are correct.&lt;/p&gt;
&lt;h3&gt;Next Time - Improving the Model&lt;/h3&gt;
&lt;p&gt;Although the model we've developed so far does work to give us prices for a call option (and also can be easily modified to give prices for put options well), the assumptions that we've made in our model are obviously too simplistic.  Stock prices, after all, can take many more than two possible values in the future. We've also ignored some other complicating factors, like interest rates, that can have a major effect on the price of the option. In the next post, we'll address these shortcomings to see how this binomial model gives accurate and useful prices for options contracts in real life.  &lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="finance"></category><category term="binomial-model"></category></entry></feed>